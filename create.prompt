You are an expert TypeScript developer and Azure Cosmos DB architect. Your task is to help me build a simple "Hello World" TypeScript ESM CLI application that allows me to ask natural language (NLP) questions about my Cosmos DB movie data using AI.

üìÖ **VERSION INFORMATION**
- **Document Created**: June 2025
- **Azure API Versions Tested**: Cosmos DB 2024-11-15, Azure OpenAI (current at time of writing)
- **Models Validated**: text-embedding-ada-002, gpt-4o
- **‚ö†Ô∏è IMPORTANT**: This document contains version-specific information that may become outdated. Always verify:
  - Latest Azure API versions
  - Current model availability and regional support
  - Package dependency versions
  - Azure service feature updates

**Project Goals:**
- Build a minimal TypeScript ESM CLI application that connects to Azure Cosmos DB.
- Use Cosmos DB movie data as the source (fields: title, description, genre, year, actors, reviews).
- Enable users to ask natural language questions about the movie data and get answers using Azure OpenAI.
- Use Cosmos DB vector search (with vectorized movie data via batch process and Cosmos policies) to enable semantic search.
- Keep the code simple and easy to learn, with no error handling or production-level features.

**Critical Implementation Details & Lessons Learned:**
- **Cosmos DB API Version**: Use API version 2024-11-15 for vector indexing support ‚ö†Ô∏è *Verify latest API version*
- **Vector Embedding Model**: Use text-embedding-ada-002 (1536 dimensions) ‚ö†Ô∏è *Check for newer embedding models*
- **Azure OpenAI Model**: Use gpt-4o for chat completions ‚ö†Ô∏è *Verify model availability and latest versions*
- **Vector Search Strategy**: Implement VectorDistance queries with fallback to keyword search
- **Data Structure**: Use structured Review objects instead of plain strings for better searchability
- **Region**: Deploy to East US 2 for optimal model availability ‚ö†Ô∏è *Check current model regional availability*
- **Authentication**: Use DefaultAzureCredential with proper tenant configuration
- **TypeScript Setup**: Ensure strict ESM configuration with proper module resolution

---

**Step 1: Cosmos DB Resource Setup**
- Use Azure Developer CLI with Bicep to create the Cosmos DB account in East US 2 ‚ö†Ô∏è *Verify region availability for latest models*.
- **CRITICAL**: Use API version 2024-11-15 for vector indexing support ‚ö†Ô∏è *Check for newer API versions with enhanced vector capabilities*
- **Vector Configuration Required**: 
  - Set vectorEmbeddingPolicy with dimensions: 1536, dataType: "float32", distanceFunction: "cosine"
  - Configure vectorIndexes for the vectors field with type: "quantizedFlat" ‚ö†Ô∏è *Verify latest indexing options*
- Use subscription-level deployment (targetScope = 'subscription')
- Provide Bicep templates and Azure Developer CLI commands for deployment.
- Focus on making this step clear and beginner-friendly.
- **Authentication**: Ensure proper Azure tenant configuration for DefaultAzureCredential

**Step 2: Movie Data**
- Use a provided sample movie dataset (fields: title, description, genre, year, actors, reviews).
- **Data Structure Enhancement**: Convert reviews from strings to structured Review objects:
  ```typescript
  interface Review {
    reviewer: string;
    rating: number;
    review: string;
  }
  ```
- Provide a simple script to load the data into Cosmos DB with upsert functionality.
- Include at least 10 diverse movies for meaningful search results.

**Step 3: Vectorization with Azure OpenAI**
- **Model**: Use text-embedding-ada-002 (1536 dimensions) for embeddings ‚ö†Ô∏è *Check for newer embedding models with better performance*
- **Strategy**: Perform vectorization as a batch process after data is loaded
- **Vectorization Target**: Create combined text from all fields (title + description + genre + year + actors + reviews)
- **Vector Storage**: Store embeddings in a 'vectors' field on each document
- **Implementation**: Use Azure OpenAI client with proper authentication
- Provide clear, simple instructions and scripts for batch vectorization and updating Cosmos DB documents with vector embeddings.
- **Performance**: Process movies in batches to avoid rate limiting ‚ö†Ô∏è *Verify current rate limits*

**Step 4: Application Design**
- Build a minimal TypeScript ESM CLI application with a conversation loop.
- **TypeScript Configuration**: Use strict ESM with proper module resolution ‚ö†Ô∏è *Verify latest TypeScript best practices*
- **Dependencies**: @azure/cosmos, @azure/openai, dotenv for configuration ‚ö†Ô∏è *Check for package updates and security patches*
- No authentication required (local/demo use).
- The CLI should accept natural language questions and return answers about any field in the movie data.
- **Project Structure**: Separate concerns into config.ts, types.ts, index.ts
- **Environment Configuration**: Use .env file for connection strings and API keys

**Step 5: NLP Question Answering**
- **Model**: Use gpt-4o for chat completions ‚ö†Ô∏è *Verify latest GPT model availability and capabilities*
- **Search Strategy**: Implement vector search with fallback mechanisms:
  1. VectorDistance query with cosine similarity
  2. Fallback to keyword search if vector search fails
  3. Graceful error handling for search failures
- Support both direct (single movie) and summarized (multiple movies) answers.
- **Context Injection**: Pass search results to GPT for contextual responses
- Output answers in plain text.
- **Performance**: Typical semantic search accuracy ~82% for relevant queries ‚ö†Ô∏è *Performance may vary with model updates*

---

**Key Technical Specifications:**
üìÖ *Information captured as of June 2025 - verify for latest versions*

- **Azure OpenAI Models**: 
  - Embeddings: text-embedding-ada-002 (1536 dimensions) ‚ö†Ô∏è *Check for newer embedding models*
  - Chat: gpt-4o ‚ö†Ô∏è *Verify latest available models*
- **Cosmos DB Configuration**:
  - API Version: 2024-11-15 ‚ö†Ô∏è *Check for newer API versions*
  - Vector Policy: cosine distance, float32, 1536 dimensions
  - Index Type: quantizedFlat ‚ö†Ô∏è *Verify latest indexing options*
- **TypeScript Setup**:
  - ESM modules with "type": "module"
  - Strict compilation settings
  - Proper @types packages ‚ö†Ô∏è *Check for package updates*

**Common Pitfalls & Solutions:**
üìÖ *Based on implementation experience as of June 2025*

1. **Vector Search Failures**: Always implement fallback to keyword search
2. **Authentication Issues**: Ensure correct Azure tenant configuration
3. **API Compatibility**: Use latest Cosmos DB API version for vector support ‚ö†Ô∏è *API versions evolve frequently*
4. **Rate Limiting**: Batch process embeddings to avoid OpenAI rate limits ‚ö†Ô∏è *Rate limits may change*
5. **Type Safety**: Use proper TypeScript interfaces for all data structures
6. **Model Deprecation**: ‚ö†Ô∏è *Monitor Azure OpenAI service announcements for model lifecycle changes*
7. **Regional Availability**: ‚ö†Ô∏è *Model availability varies by region and changes over time*

**Testing & Validation:**
üìÖ *Testing requirements as of June 2025*

- **Testing Framework**: Use Vitest for unit and integration testing ‚ö†Ô∏è *Verify latest Vitest version*
- **Coverage Requirements**: Minimum 80% code coverage across all modules
- **Test Categories**:
  1. **Unit Tests**: Individual functions and classes
  2. **Integration Tests**: Azure service connectivity and data flow
  3. **E2E Tests**: Complete conversation workflow
- **Test Modules Required**:
  - Configuration validation (config.ts)
  - Type definitions and interfaces (types.ts)
  - Cosmos DB operations (search, query, data loading)
  - OpenAI integration (embeddings, chat completions)
  - Vector search functionality with fallbacks
  - CLI conversation loop
- **Mock Strategy**: Mock Azure services for unit tests, use test data for integration
- **Coverage Reports**: Generate HTML and terminal coverage reports
- **Performance Testing**: Validate response times for vector search and AI responses
- **Error Handling Tests**: Test fallback mechanisms and error scenarios
- **Scripts**: Include npm scripts for running tests, coverage, and CI/CD integration ‚ö†Ô∏è *Update package.json test scripts*

**Detailed Testing Stack & Implementation:**
üìÖ *Comprehensive testing implementation guide as of June 2025*

**Core Testing Dependencies**:
```json
{
  "devDependencies": {
    "vitest": "^3.2.3",
    "@vitest/coverage-v8": "^3.2.3",
    "@vitest/ui": "^3.2.3"
  }
}
```

**Test Configuration Requirements**:
- **Vitest Config**: Configure with ESM support, coverage thresholds, and test patterns
- **Coverage Thresholds**: 
  - Statements: 80%
  - Branches: 80%
  - Functions: 80%
  - Lines: 80%
- **Test Environment**: Node.js with proper ESM module resolution
- **Mock Infrastructure**: Comprehensive Azure SDK and OpenAI mocking

**Test Structure Requirements**:
```
tests/
‚îú‚îÄ‚îÄ unit/                    # Unit tests for individual modules
‚îÇ   ‚îú‚îÄ‚îÄ config.test.ts      # Environment and configuration testing
‚îÇ   ‚îú‚îÄ‚îÄ types.test.ts       # TypeScript interface validation
‚îÇ   ‚îî‚îÄ‚îÄ movie-ai.test.ts    # Core MovieAI class functionality
‚îú‚îÄ‚îÄ integration/             # Azure service integration tests
‚îÇ   ‚îî‚îÄ‚îÄ azure-services.test.ts
‚îú‚îÄ‚îÄ e2e/                     # End-to-end workflow tests
‚îÇ   ‚îî‚îÄ‚îÄ application.test.ts
‚îú‚îÄ‚îÄ __mocks__/              # Mock implementations
‚îÇ   ‚îî‚îÄ‚îÄ azure-services.ts   # Azure & OpenAI service mocks
‚îî‚îÄ‚îÄ test-utils.ts           # Test helper utilities
```

**Required Test Scripts**:
```json
{
  "scripts": {
    "test": "vitest run",
    "test:unit": "vitest run tests/unit/",
    "test:integration": "vitest run tests/integration/",
    "test:e2e": "vitest run tests/e2e/",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest run --coverage"
  }
}
```

**Unit Testing Specifications**:
1. **Configuration Tests**:
   - Environment variable loading and validation
   - Default value handling
   - Error cases for missing required variables
   - Type safety validation

2. **Type Interface Tests**:
   - Movie interface validation
   - Review interface validation
   - Embedding structure validation
   - Data transformation accuracy

3. **MovieAI Class Tests**:
   - Constructor initialization
   - Vector search functionality with realistic embeddings
   - Keyword search fallback mechanisms
   - Cosine similarity calculations (including edge cases)
   - Question answering with GPT integration
   - Error handling for network failures
   - API response validation
   - Performance benchmarks

**Integration Testing Specifications**:
1. **Azure Cosmos DB Integration**:
   - Connection establishment
   - Query execution with vector search
   - Data retrieval and validation
   - Error handling for service unavailability

2. **Azure OpenAI Integration**:
   - Embedding generation
   - Chat completion requests
   - Rate limiting handling
   - API error scenarios

3. **End-to-End Data Flow**:
   - Complete search ‚Üí embedding ‚Üí query ‚Üí response workflow
   - Performance validation (response times < 5 seconds)
   - Data consistency verification

**E2E Testing Specifications**:
1. **Application Startup**:
   - CLI initialization without errors
   - Configuration loading validation
   - Service connectivity verification

2. **Conversation Loop**:
   - Natural language question processing
   - Vector search execution
   - GPT response generation
   - Error graceful handling

3. **Utility Scripts**:
   - Configuration test script execution
   - Integration test validation
   - Performance benchmarking

**Mock Implementation Requirements**:
1. **Azure Cosmos DB Mocks**:
   - Realistic container and query mocking
   - Proper response structure simulation
   - Error scenario simulation
   - Vector search result mocking

2. **OpenAI Service Mocks**:
   - Embedding API response simulation
   - Chat completion response mocking
   - Rate limiting simulation
   - Error response handling

3. **Test Data Management**:
   - Representative movie data with embeddings
   - Configurable mock scenarios
   - Consistent test data generation
   - Reset capabilities for test isolation

**Performance & Error Testing**:
1. **Performance Benchmarks**:
   - Vector search response time < 2 seconds
   - Embedding generation < 3 seconds
   - Chat completion < 5 seconds
   - Memory usage monitoring

2. **Error Scenario Testing**:
   - Network connectivity failures
   - API rate limiting
   - Invalid API responses
   - Malformed data handling
   - Service unavailability

**Coverage Requirements & Validation**:
- **Core Application Logic**: Minimum 80% coverage
- **Configuration Module**: 100% coverage recommended
- **Error Handling Paths**: Comprehensive coverage
- **Mock Implementation**: Adequate coverage for reliability
- **Coverage Reports**: HTML and LCOV formats for CI/CD integration

**CI/CD Integration Specifications**:
- **Test Execution**: All tests must pass before deployment
- **Coverage Validation**: Enforce 80% threshold in pipeline
- **Performance Gates**: Response time validation
- **Security Scanning**: Dependency vulnerability checks
- **Documentation**: Automated test result reporting

**Testing Implementation Process:**
üìÖ *Step-by-step testing implementation workflow as of June 2025*

**Phase 1: Test Infrastructure Setup**
1. **Install Testing Dependencies**:
   ```bash
   npm install --save-dev vitest @vitest/coverage-v8 @vitest/ui
   ```
2. **Configure Vitest**:
   - Create `vitest.config.ts` with ESM support
   - Set coverage thresholds and providers
   - Configure test patterns and exclusions
3. **Setup Test Directory Structure**:
   - Create `tests/` directory with proper subdirectories
   - Implement base mock infrastructure
   - Create test utility functions

**Phase 2: Unit Test Implementation**
1. **Configuration Module Tests** (`tests/unit/config.test.ts`):
   - Test environment variable loading
   - Validate configuration object structure
   - Test error handling for missing variables
   - Verify type safety and defaults

2. **Type Definition Tests** (`tests/unit/types.test.ts`):
   - Validate Movie interface compliance
   - Test Review interface structure
   - Verify embedding type definitions
   - Test data transformation functions

3. **Core Functionality Tests** (`tests/unit/movie-ai.test.ts`):
   - Test MovieAI class initialization
   - Mock Azure SDK dependencies properly
   - Test vector search with realistic data
   - Validate cosine similarity calculations
   - Test fallback mechanisms
   - Verify error handling scenarios

**Phase 3: Integration Test Development**
1. **Azure Services Integration** (`tests/integration/azure-services.test.ts`):
   - Test actual Azure Cosmos DB connectivity
   - Validate OpenAI API integration
   - Test end-to-end data flow
   - Performance validation with realistic datasets
   - Rate limiting and error handling

**Phase 4: End-to-End Test Creation**
1. **Application Workflow Tests** (`tests/e2e/application.test.ts`):
   - Test complete CLI application startup
   - Validate conversation loop functionality
   - Test natural language question processing
   - Verify response generation and formatting
   - Test graceful error handling

**Phase 5: Mock Infrastructure**
1. **Azure Service Mocks** (`tests/__mocks__/azure-services.ts`):
   - Create comprehensive Cosmos DB container mocks
   - Implement OpenAI API response mocking
   - Setup configurable test scenarios
   - Implement proper mock reset functionality

2. **Test Utilities** (`tests/test-utils.ts`):
   - Create test data generation functions
   - Implement validation helpers
   - Setup performance testing utilities
   - Create environment validation helpers

**Phase 6: Coverage & Performance Validation**
1. **Coverage Analysis**:
   - Run coverage reports and validate 80%+ threshold
   - Identify uncovered code paths
   - Implement additional tests for edge cases
   - Generate HTML coverage reports

2. **Performance Benchmarking**:
   - Validate response time requirements
   - Test memory usage patterns
   - Verify concurrency handling
   - Test with realistic data volumes

**Phase 7: CI/CD Integration**
1. **Test Script Configuration**:
   - Setup npm scripts for different test categories
   - Configure watch mode for development
   - Setup coverage reporting for CI/CD
   - Implement test result formatting

2. **Pipeline Integration**:
   - Configure test execution in deployment pipeline
   - Setup coverage threshold enforcement
   - Implement performance gate validation
   - Configure automated test reporting

**Testing Best Practices & Guidelines**:
- **Test Isolation**: Each test should be independent and repeatable
- **Mock Strategy**: Mock external dependencies, test internal logic
- **Data Management**: Use consistent test data across test suites
- **Error Testing**: Test both success and failure scenarios
- **Performance**: Include realistic performance benchmarks
- **Documentation**: Document test purpose and expected outcomes
- **Maintenance**: Regularly update tests with code changes

---

**Instructions for the AI:**
‚ö†Ô∏è **IMPORTANT**: Before implementation, verify all version-specific information marked with warning symbols above.

- For each step, generate only the necessary code, scripts, and instructions.
- Focus on simplicity and clarity‚Äîavoid error handling, parameter validation, or production-level code.
- **ALWAYS** use the specified API versions and model names from the technical specifications above, but verify they are still current.
- **Version Verification**: Check Azure documentation for the latest API versions, model availability, and regional support before proceeding.
- Explain how to deploy the Cosmos DB resource using Azure Developer CLI and Bicep with proper vector configuration.
- Provide a sample movie dataset with structured Review objects and a script to load it.
- Explain and script the batch vectorization process using Azure OpenAI, including how to update Cosmos DB documents with vector embeddings.
- Scaffold the minimal TypeScript ESM CLI application, including Cosmos DB and Azure OpenAI integration.
- Implement a simple conversation loop that accepts NLP questions and returns plain text answers using semantic search and GPT with fallback strategies.
- **Testing Implementation**: Create comprehensive test suite using Vitest with 80%+ coverage, including unit, integration, and E2E tests.
- Include utility scripts for testing and validation.
- **Dependency Management**: Always check for the latest package versions and security updates.
- Ask clarifying questions if any requirements are unclear or if additional information is needed.
